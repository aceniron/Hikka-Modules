from .. import loader, utils
import asyncio
import logging

@loader.tds
class MailingChatsMod(loader.Module):
    """ü™ê –ú–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º –∏ —Ç–æ–ø–∏–∫–∞–º"""

    strings = {
        "name": "Mailing Chats",
        "chat_added": "‚úÖ –ß–∞—Ç {} –¥–æ–±–∞–≤–ª–µ–Ω",
        "chat_removed": "‚ùå –ß–∞—Ç {} —É–¥–∞–ª—ë–Ω",
        "no_chats": "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç",
        "chats_list": "üìù –ß–∞—Ç—ã:\n{}",
        "saved": "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {}",
        "no_saved": "üìÇ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
        "cleared": "üßπ –°–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã",
        "broadcast_started": "üì° –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
        "broadcast_stopped": "üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "tag_status": "üè∑Ô∏è –°—Ç–∞—Ç—É—Å —Ç–µ–≥–æ–≤: {}"
    }

    def __init__(self):
        self.broadcasting = False

    def _get_chats(self): return self.db.get(self.strings["name"], "chats", [])
    def _save_chats(self, chats): self.db.set(self.strings["name"], "chats", chats)
    def _get_saved_msgs(self): return self.db.get(self.strings["name"], "saved_msgs", [])
    def _save_msgs(self, msgs): self.db.set(self.strings["name"], "saved_msgs", msgs)
    def _get_delay(self): return self.db.get(self.strings["name"], "delay_seconds", 2)
    def _get_tags_enabled(self): return self.db.get(self.strings["name"], "tags_enabled", False)
    def _set_tags_enabled(self, value): self.db.set(self.strings["name"], "tags_enabled", value)
    def _get_usertag_filter(self): return self.db.get(self.strings["name"], "usertag_filter", "0")
    def _set_usertag_filter(self, value): self.db.set(self.strings["name"], "usertag_filter", value)

    def _normalize_chat(self, chat_raw):
        try:
            if chat_raw.startswith("@"): return chat_raw
            chat_id = int(chat_raw)
            if chat_id > 1000000000000: return chat_id
            if not str(chat_id).startswith("-100"): return int("-100" + str(chat_id))
            return chat_id
        except Exception: return chat_raw

    @loader.command()
    async def addchatr(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: @user, 2847..., -100..."""
        raw = utils.get_args_raw(message)
        if not raw: return await message.edit("‚ùå –£–∫–∞–∂–∏ —á–∞—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        chats = [self._normalize_chat(c.strip()) for c in raw.split(",")]
        current = self._get_chats()
        added = [str(c) for c in chats if c not in current]
        self._save_chats(current + chats)
        await message.edit(f"{self.strings['chat_added'].format(', '.join(added))}")

    @loader.command()
    async def delchatr(self, message):
        """–£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
        raw = utils.get_args_raw(message)
        if not raw: return await message.edit("‚ùå –£–∫–∞–∂–∏ —á–∞—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        chats = [self._normalize_chat(c.strip()) for c in raw.split(",")]
        current = self._get_chats()
        remaining = [c for c in current if c not in chats]
        removed = [str(c) for c in chats if c in current]
        self._save_chats(remaining)
        await message.edit(f"{self.strings['chat_removed'].format(', '.join(removed))}")

    @loader.command()
    async def listchatr(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        chats = self._get_chats()
        if not chats: return await message.edit(self.strings["no_chats"])
        await message.edit(self.strings["chats_list"].format("\n".join([str(c) for c in chats])))

    @loader.command()
    async def clearchatr(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤"""
        self._save_chats([])
        await message.edit("üßπ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω")

    @loader.command()
    async def savemail(self, message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª"""
        if not message.reply_to: return await message.edit("‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        msg = await message.get_reply_message()
        saved = self._get_saved_msgs()
        saved.append((message.chat_id, msg.id))
        self._save_msgs(saved)
        await message.edit(self.strings["saved"].format(len(saved)))

    @loader.command()
    async def showmail(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        saved = self._get_saved_msgs()
        if not saved: return await message.edit(self.strings["no_saved"])
        for chat_id, msg_id in saved:
            try:
                msg = await message.client.get_messages(chat_id, ids=msg_id)
                if msg.media:
                    await message.client.send_file(message.chat_id, msg.media, caption=msg.message or "")
                else:
                    await message.client.send_message(message.chat_id, msg.message or "")
                await asyncio.sleep(0.5)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {msg_id} –∏–∑ {chat_id}: {e}")

    @loader.command()
    async def clearmail(self, message):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self._save_msgs([])
        await message.edit(self.strings["cleared"])

    @loader.command()
    async def setdelay(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏"""
        raw = utils.get_args_raw(message)
        try:
            sec = float(raw)
            if sec < 0: raise ValueError
            self.db.set(self.strings["name"], "delay_seconds", sec)
            await message.edit(f"‚öôÔ∏è –ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {sec} —Å–µ–∫")
        except Exception: await message.edit("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ >= 0")

    @loader.command()
    async def settags(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ–≥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        raw = utils.get_args_raw(message).lower()
        if raw not in ["true", "false"]: return await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ true –∏–ª–∏ false")
        self._set_tags_enabled(raw == "true")
        await message.edit(f"üè∑Ô∏è –¢–µ–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã: {raw == 'true'}")

    @loader.command()
    async def tagsstatus(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Ç–µ–≥–∏"""
        status = self._get_tags_enabled()
        await message.edit(self.strings["tag_status"].format(status))

    @loader.command()
    async def usertag(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä usertag: ID –∏–ª–∏ @username —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"""
        raw = utils.get_args_raw(message)
        if not raw: return await message.edit("‚ùå –£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID –∏–ª–∏ @username —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        self._set_usertag_filter(raw)
        await message.edit(f"‚úÖ usertag —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {raw}")

    @loader.command()
    async def usertaglist(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ usertag"""
        taglist = self._get_usertag_filter()
        await message.edit(f"üìã –¢–µ–∫—É—â–∏–π usertag: {taglist}")

    @loader.command()
    async def clearusertag(self, message):
        """–°–±—Ä–æ—Å–∏—Ç—å usertag ‚Äî —Ç–µ–ø–µ—Ä—å —Ç–µ–≥–∞—é—Ç—Å—è –≤—Å–µ"""
        self._set_usertag_filter("0")
        await message.edit("üßπ usertag —Å–±—Ä–æ—à–µ–Ω –¥–æ 0 ‚Äî —Ç–µ–ø–µ—Ä—å —Ç–µ–≥–∞—é—Ç—Å—è –≤—Å–µ")

    @loader.command()
    async def mailall(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º"""
        chats_raw = self._get_chats()
        msgs = self._get_saved_msgs()
        delay = self._get_delay()
        tags_enabled = self._get_tags_enabled()
        usertag = self._get_usertag_filter()
        if not chats_raw: return await message.edit(self.strings["no_chats"])
        if not msgs: return await message.edit(self.strings["no_saved"])
        self.broadcasting = True
        await message.edit(self.strings["broadcast_started"])

        entities = []
        for raw in chats_raw:
            try:
                entity = await message.client.get_input_entity(self._normalize_chat(str(raw)))
                entities.append(entity)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {raw}: {e}")

        tag_targets = [i.strip().lstrip("@").lower() for i in usertag.split(",")] if usertag != "0" else []

        while self.broadcasting:
            for chat_id, msg_id in msgs:
                if not self.broadcasting: break
                try:
                    original = await message.client.get_messages(chat_id, ids=msg_id)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {msg_id} –∏–∑ {chat_id}: {e}")
                    continue

                for entity in entities:
                    if not self.broadcasting: break
                    final_text = original.message or ""

                    if tags_enabled:
                        try:
                            users = []
                            async for user in message.client.iter_participants(entity):
                                if user.bot: continue
                                uid = str(user.id)
                                uname = (user.username or "").lower()
                                if usertag == "0" or uid in tag_targets or uname in tag_targets:
                                    users.append(f'<a href="tg://user?id={user.id}">\u200B</a>')
                            final_text += " " + "".join(users)
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ —Ç–µ–≥–∞–Ω–∏—è –≤ {entity}: {e}")

                    try:
                        if not self.broadcasting: break
                        if original.media:
                            await message.client.send_file(entity, original.media, caption=final_text)
                        else:
                            await message.client.send_message(entity, final_text)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {entity}: {e}")
                if not self.broadcasting: break
                await asyncio.sleep(delay)

    @loader.command()
    async def stopbroadcast(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
        self.broadcasting = False
        await message.edit(self.strings["broadcast_stopped"])

    @loader.command()
    async def top(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã"""
        saved = self._get_saved_msgs()
        tags_enabled = self._get_tags_enabled()
        usertag = self._get_usertag_filter()
        tag_targets = [i.strip().lstrip("@").lower() for i in usertag.split(",")] if usertag != "0" else []

        if not saved:
            return await message.edit("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

        chat_id, msg_id = saved[-1]
        try:
            original = await message.client.get_messages(chat_id, ids=msg_id)
        except Exception as e:
            return await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        final_text = original.message or ""
        if tags_enabled:
            try:
                users = []
                async for user in message.client.iter_participants(message.chat_id):
                    if user.bot: continue
                    uid = str(user.id)
                    uname = (user.username or "").lower()
                    if usertag == "0" or uid in tag_targets or uname in tag_targets:
                        users.append(f'<a href="tg://user?id={user.id}">\u200B</a>')
                final_text += " " + "".join(users)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ç–µ–≥–∞–Ω–∏—è –≤ .top: {e}")

        try:
            reply_id = message.reply_to_msg_id
            if original.media:
                await message.client.send_file(message.chat_id, original.media, caption=final_text, reply_to=reply_id)
            else:
                await message.client.send_message(message.chat_id, final_text, reply_to=reply_id)
            await message.delete()
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")