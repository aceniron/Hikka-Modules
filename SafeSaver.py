from .. import loader, utils
from telethon.tl.types import Message
from telethon.tl.functions.messages import ForwardMessagesRequest
import logging
import time

logger = logging.getLogger(__name__)

@loader.tds
class SafeMessageSaverMod(loader.Module):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–æ—Ö—Ä–∞–Ω—è—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π"""

    strings = {
        "name": "SafeSaver",
        "saved": "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: <code>{}</code>",
        "not_found": "üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ: <code>{}</code>",
        "restored": "",
        "deleted": "üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: <code>{}</code>",
        "list": "üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{}",
        "empty": "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
        "help": (
            "‚Ñπ <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "<code>.ssave –Ω–∞–∑–≤–∞–Ω–∏–µ</code> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–æ—Ç–≤–µ—Ç–æ–º)\n"
            "<code>.sget –Ω–∞–∑–≤–∞–Ω–∏–µ</code> - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            "<code>.sdel –Ω–∞–∑–≤–∞–Ω–∏–µ</code> - —É–¥–∞–ª–∏—Ç—å\n"
            "<code>.slist</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë\n"
            "<code>.shelp</code> - —Å–ø—Ä–∞–≤–∫–∞"
        ),
    }

    def __init__(self):
        self.storage = {}

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.storage = self._db.get("SafeSaver", "storage", {})

    def save_db(self):
        self._db.set("SafeSaver", "storage", self.storage)

    @loader.unrestricted
    async def ssavecmd(self, message: Message):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings["help"])

        reply = await message.get_reply_message()
        if not reply:
            return await utils.answer(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        self.storage[args.lower()] = {
            "text": reply.text,
            "raw_text": reply.raw_text,
            "date": int(time.time()),
            "chat_id": utils.get_chat_id(message),
            "msg_id": reply.id,
            "is_media": bool(reply.media),
        }

        self.save_db()
        await utils.answer(
            message,
            self.strings["saved"].format(args)
        )

    @loader.unrestricted
    async def sgetcmd(self, message: Message):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings["help"])

        key = args.lower()
        if key not in self.storage:
            return await utils.answer(
                message,
                self.strings["not_found"].format(key)
            )

        saved = self.storage[key]
        try:
            await self._client(ForwardMessagesRequest(
                from_peer=saved["chat_id"],
                id=[saved["msg_id"]],
                to_peer=utils.get_chat_id(message),
                drop_author=True,
                noforwards=False
            ))
            await message.delete() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
            await utils.answer(
                message,
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏."
            )

    @loader.unrestricted
    async def sdelcmd(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings["help"])

        key = args.lower()
        if key in self.storage:
            del self.storage[key]
            self.save_db()
            await utils.answer(
                message,
                self.strings["deleted"].format(key)
            )
        else:
            await utils.answer(
                message,
                self.strings["not_found"].format(key)
            )

    @loader.unrestricted
    async def slistcmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"""
        if not self.storage:
            return await utils.answer(message, self.strings["empty"])

        items = [
            f"‚Ä¢ <code>{name}</code> - {data['text'][:30]}..."
            for name, data in self.storage.items()
        ]
        await utils.answer(
            message,
            self.strings["list"].format("\n".join(items))
        )

    @loader.unrestricted
    async def shelpcmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        await utils.answer(message, self.strings["help"])