from .. import loader, utils
import os
import asyncio
import aiohttp
from io import BytesIO
from telethon import functions
from telethon.tl.functions.account import UpdateProfileRequest, UpdateUsernameRequest
from telethon.tl.functions.photos import DeletePhotosRequest
import re

PHOTO_FILE = "delacc_photo.txt"
DEFAULT_PHOTO = "https://envs.sh/ar_.jpg"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞

@loader.tds
class AccountDeleter(loader.Module):
    strings = {"name": "AccountDeleter"}

    @loader.command()
    async def delacc(self, m):
        """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç (–º–µ–Ω—è–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É, –Ω–∏–∫ –∏ —É–¥–∞–ª—è–µ—Ç username)"""
        text = "–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑..."
        await utils.answer(m, f"{text} <b>10</b> <emoji document_id=5296432770392791386>‚úàÔ∏è</emoji>")
        await asyncio.sleep(0.5)
        await utils.answer(m, f"{text} <b>6</b> <emoji document_id=5296432770392791386>‚úàÔ∏è</emoji>")
        await asyncio.sleep(0.7)
        await utils.answer(m, f"{text} <b>3</b> <emoji document_id=5296432770392791386>‚úàÔ∏è</emoji>")
        await asyncio.sleep(1)
        await utils.answer(m, f"{text} <b>1</b> <emoji document_id=5296432770392791386>‚úàÔ∏è</emoji>")
        await asyncio.sleep(0.8)

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è
        profile_photos = await self.client.get_profile_photos('me')
        await self.client(DeletePhotosRequest(profile_photos))

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ
        photo_url = self.get_saved_photo()
        if not self.is_valid_url(photo_url):
            await utils.answer(m, "<b>–û—à–∏–±–∫–∞: —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ .setdelphoto <—Å—Å—ã–ª–∫–∞></b>")
            return
        
        await self.set_photo(photo_url, m)

        # –ú–µ–Ω—è–µ–º –∏–º—è –∏ —É–¥–∞–ª—è–µ–º username
        await self._client(UpdateProfileRequest(
            first_name='Deleted Account',
            last_name='',
            about='–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ https://telegram.org/faq'
        ))
        await self._client(UpdateUsernameRequest(""))  # –£–¥–∞–ª—è–µ–º username

        await utils.answer(m, "<b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω. <emoji document_id=6325592348529003273>üò¶</emoji></b>")

    @loader.command()
    async def setdelphoto(self, m):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è .delacc (–±–µ–∑ —Å—Å—ã–ª–∫–∏ - —Å–±—Ä–æ—Å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ)"""
        args = utils.get_args_raw(m)

        if args:  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞
            if not self.is_valid_url(args):
                await utils.answer(m, "<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</b>")
                return
            photo_url = args
        else:  # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
            photo_url = DEFAULT_PHOTO

        with open(PHOTO_FILE, "w") as f:
            f.write(photo_url)

        await self.set_photo(photo_url, m)  # –°—Ä–∞–∑—É –∂–µ –º–µ–Ω—è–µ–º —Ñ–æ—Ç–æ
        await utils.answer(m, "<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å .delacc –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.</b>")

    def get_saved_photo(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é"""
        if os.path.exists(PHOTO_FILE):
            with open(PHOTO_FILE, "r") as f:
                link = f.read().strip()
                return link if link else DEFAULT_PHOTO
        return DEFAULT_PHOTO  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞

    def is_valid_url(self, url):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π"""
        regex = re.compile(
            r'^(https?:\/\/)?'  # http:// –∏–ª–∏ https://
            r'(([A-Za-z0-9-]+\.)+[A-Za-z]{2,6}|'  # –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
            r'(\d{1,3}\.){3}\d{1,3})'  # –∏–ª–∏ IP
            r'(:\d+)?(\/.*)?$', re.IGNORECASE)
        return re.match(regex, url) is not None

    async def set_photo(self, photo_url, m):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        async with aiohttp.ClientSession() as session:
            async with session.get(photo_url) as response:
                if response.status == 200:
                    image_data = await response.read()
                    avatar = await self.client.upload_file(BytesIO(image_data))
                    await self.client(functions.photos.UploadProfilePhotoRequest(file=avatar))
                    await utils.answer(m, "<b>–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>")
                else:
                    await utils.answer(m, "<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>")

    @loader.command()
    async def gethex(self, m):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç HEX –∫–æ–¥ —Ü–≤–µ—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ —Ü–µ–Ω—Ç—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"""
        if not m.is_reply:
            await utils.answer(m, "<b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</b>")
            return
        
        replied_msg = await m.get_reply_message()
        if not replied_msg.photo:
            await utils.answer(m, "<b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</b>")
            return

        photo = replied_msg.photo
        photo_path = await self.client.download_media(photo)
        
        from PIL import Image
        
        image = Image.open(photo_path)
        width, height = image.size
        central_pixel = image.getpixel((int(width / 2), int(height / 2)))
        
        hex_color = '#{:02x}{:02x}{:02x}'.format(*central_pixel[:3])
        await utils.answer(m, f"<b>HEX –∫–æ–¥ —Ü–≤–µ—Ç–∞:</b> {hex_color}")
        
        os.remove(photo_path)