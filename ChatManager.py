from typing import List, Union
from telethon.tl.types import Dialog, User, Channel, Chat
from telethon.tl.functions.messages import DeleteHistoryRequest
from telethon.tl.functions.channels import LeaveChannelRequest

from .. import loader, utils


@loader.tds
class ChatManagerMod(loader.Module):
    """üìÉ–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ"""

    strings = {
        "name": "ChatManager",
        "description": (
            """üìÉ–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ."""
        ),
        "processing": "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...",
        "deleted_personal": "‚úÖ –£–¥–∞–ª–µ–Ω–æ {} –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏",
        "deleted_all_personal": "‚úÖ –£–¥–∞–ª–µ–Ω–æ {} –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤",
        "left_all_groups": "‚úÖ –í—ã—à–µ–ª –∏–∑ {} –≥—Ä—É–ø–ø",
        "left_groups_less": "‚úÖ –í—ã—à–µ–ª –∏–∑ {} –≥—Ä—É–ø–ø —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ {}",
        "whitelist_added": "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç: {}",
        "left_groups_not_whitelist": "‚úÖ –í—ã—à–µ–ª –∏–∑ {} –≥—Ä—É–ø–ø, –Ω–µ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ",
        "left_channels_not_whitelist": "‚úÖ –í—ã—à–µ–ª –∏–∑ {} –∫–∞–Ω–∞–ª–æ–≤, –Ω–µ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ",
        "left_all_channels": "‚úÖ –í—ã—à–µ–ª –∏–∑ {} –∫–∞–Ω–∞–ª–æ–≤",
        "whitelist_cleared": "‚úÖ –í–∞–π—Ç–ª–∏—Å—Ç –æ—á–∏—â–µ–Ω",
        "whitelist_empty": "‚ÑπÔ∏è –í–∞–π—Ç–ª–∏—Å—Ç –ø—É—Å—Ç",
        "whitelist_content": "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞–π—Ç–ª–∏—Å—Ç–∞:\n{}",
    }

    def __init__(self):
        self.whitelist: List[int] = []

    async def client_ready(self, client, db):
        self._client = client

    @loader.command(desc="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã –æ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    async def deldeleted(self, message):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        await utils.answer(message, self.strings["processing"])
        count = 0

        async for dialog in self._client.iter_dialogs():
            if not isinstance(dialog.entity, User):
                continue

            if dialog.entity.deleted:
                await self._client(DeleteHistoryRequest(
                    peer=dialog.entity,
                    max_id=0,
                    revoke=True
                ))
                count += 1

        await utils.answer(
            message,
            self.strings["deleted_personal"].format(count)
        )

    @loader.command(desc="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã")
    async def delallpersonal(self, message):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã (–¥–∏–∞–ª–æ–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)"""
        await utils.answer(message, self.strings["processing"])
        count = 0

        async for dialog in self._client.iter_dialogs():
            if isinstance(dialog.entity, User):
                await self._client(DeleteHistoryRequest(
                    peer=dialog.entity,
                    max_id=0,
                    revoke=True
                ))
                count += 1

        await utils.answer(
            message,
            self.strings["deleted_all_personal"].format(count)
        )

    @loader.command(desc="–í—ã–π—Ç–∏ –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø")
    async def leaveallgroups(self, message):
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø (–Ω–µ –∫–∞–Ω–∞–ª–æ–≤)"""
        await utils.answer(message, self.strings["processing"])
        count = 0

        async for dialog in self._client.iter_dialogs():
            if isinstance(dialog.entity, Chat):
                await self._client(LeaveChannelRequest(dialog.entity))
                count += 1

        await utils.answer(
            message,
            self.strings["left_all_groups"].format(count)
        )

    @loader.command(desc="–í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø —Å —á–∏—Å–ª–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ")
    async def leavegroupsless(self, message):
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –≥—Ä—É–ø–ø —Å —á–∏—Å–ª–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ"""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit():
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        min_members = int(args)
        await utils.answer(message, self.strings["processing"])
        count = 0

        async for dialog in self._client.iter_dialogs():
            if isinstance(dialog.entity, Chat):
                try:
                    participants = await self._client.get_participants(dialog.entity)
                    if len(participants) < min_members:
                        await self._client(LeaveChannelRequest(dialog.entity))
                        count += 1
                except:
                    continue

        await utils.answer(
            message,
            self.strings["left_groups_less"].format(count, min_members)
        )

    @loader.command(desc="–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: -10012345678)")
    async def whitelistadd(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç (–∏–∑ –Ω–µ–≥–æ –Ω–µ –±—É–¥—É—Ç –≤—ã—Ö–æ–¥–∏—Ç—å)"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -10012345678)")
            return

        try:
            chat_id = int(args)
            if chat_id not in self.whitelist:
                self.whitelist.append(chat_id)
            await utils.answer(
                message,
                self.strings["whitelist_added"].format(chat_id)
            )
        except ValueError:
            await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞")

    @loader.command(desc="–í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø –Ω–µ –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞")
    async def leavegroupsnotwl(self, message):
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø, –∫—Ä–æ–º–µ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ"""
        await utils.answer(message, self.strings["processing"])
        count = 0

        async for dialog in self._client.iter_dialogs():
            if isinstance(dialog.entity, Chat):
                if dialog.entity.id not in self.whitelist:
                    await self._client(LeaveChannelRequest(dialog.entity))
                    count += 1

        await utils.answer(
            message,
            self.strings["left_groups_not_whitelist"].format(count)
        )

    @loader.command(desc="–í—ã–π—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞")
    async def leavechannelsnotwl(self, message):
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, –∫—Ä–æ–º–µ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ"""
        await utils.answer(message, self.strings["processing"])
        count = 0

        async for dialog in self._client.iter_dialogs():
            if isinstance(dialog.entity, Channel) and not dialog.entity.megagroup:
                if dialog.entity.id not in self.whitelist:
                    await self._client(LeaveChannelRequest(dialog.entity))
                    count += 1

        await utils.answer(
            message,
            self.strings["left_channels_not_whitelist"].format(count)
        )

    @loader.command(desc="–í—ã–π—Ç–∏ –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤")
    async def leaveallchannels(self, message):
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        await utils.answer(message, self.strings["processing"])
        count = 0

        async for dialog in self._client.iter_dialogs():
            if isinstance(dialog.entity, Channel) and not dialog.entity.megagroup:
                await self._client(LeaveChannelRequest(dialog.entity))
                count += 1

        await utils.answer(
            message,
            self.strings["left_all_channels"].format(count)
        )

    @loader.command(desc="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–π—Ç–ª–∏—Å—Ç")
    async def whitelistshow(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞–π—Ç–ª–∏—Å—Ç–∞"""
        if not self.whitelist:
            await utils.answer(message, self.strings["whitelist_empty"])
            return

        text = "\n".join(str(chat_id) for chat_id in self.whitelist)
        await utils.answer(
            message,
            self.strings["whitelist_content"].format(text)
        )

    @loader.command(desc="–û—á–∏—Å—Ç–∏—Ç—å –≤–∞–π—Ç–ª–∏—Å—Ç")
    async def whitelistclear(self, message):
        """–û—á–∏—â–∞–µ—Ç –≤–∞–π—Ç–ª–∏—Å—Ç"""
        self.whitelist = []
        await utils.answer(message, self.strings["whitelist_cleared"])

    def __repr__(self):
        return (
            f"<ChatManagerMod whitelist={len(self.whitelist)} items>\n"
        )