from telethon import types
from telethon.tl.functions.channels import LeaveChannelRequest
from .. import loader, utils
from telethon.tl.types import Message
from telethon.tl.functions.users import GetFullUserRequest

class ID(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á–∞—Ç–æ–≤, –∫–∞–Ω–∞–ª–æ–≤ –∏ –±–æ—Ç–æ–≤"""

    strings = {
        "name": "ID",
        "help": """
‚ñ´Ô∏è .userid –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID
‚ñ´Ô∏è .channelid –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Ö ID
‚ñ´Ô∏è .botid –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ —Å –∏—Ö ID
‚ñ´Ô∏è .groupid –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø —Å –∏—Ö ID
‚ñ´Ô∏è .id –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∞ –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–∏—Ç—å
‚ñ´Ô∏è .leav [ID] -- –ü–æ–∫–∏–Ω—É—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª
‚ñ´Ô∏è .myid –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π ID –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –∞ –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–∏—Ç—å
‚ñ´Ô∏è .suid –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∑–∞—Ç–µ–º —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤)
‚ñ´Ô∏è .uid –ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —Å–¥–µ–ª–∞–Ω –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø–æ username –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –∞ –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–∏—Ç—å
‚ñ´Ô∏è .cgid –ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç–µ –∏–ª–∏ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
"""
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    @loader.owner
    async def idcmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∞ –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–∏—Ç—å"""
        await message.delete()
        reply = await message.get_reply_message()
        if not reply:
            await message.client.send_message(message.to_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        try:
            user = await message.client.get_entity(reply.sender_id)
            if isinstance(user, types.User):
                await message.client.send_message('me', f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ‚öú{user.id}‚öú")
            else:
                await message.client.send_message(message.to_id, "–≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            await message.client.send_message(message.to_id, f"–û—à–∏–±–∫–∞: {str(e)}")

    async def myidcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π ID –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –∞ –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–∏—Ç—å"""
        await message.delete()
        reply = await message.get_reply_message()
        if reply:
            await message.client.send_message(message.chat_id, f"–ú–æ–π ID: ‚öú{message.sender_id}‚öú", reply_to=reply.id)
        else:
            await message.client.send_message(message.chat_id, f"–ú–æ–π ID: ‚öú{message.sender_id}‚öú")

    async def uidcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —Å–¥–µ–ª–∞–Ω –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø–æ username –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –∞ –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–∏—Ç—å"""
        await message.delete()
        args = utils.get_args_raw(message)
        
        if args:
            if not args.startswith("@"):
                await message.client.send_message(message.to_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username.")
                return

            try:
                user = await message.client.get_entity(args)
                if isinstance(user, types.User):
                    await message.client.send_message(message.chat_id, f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {args}: ‚öú{user.id}‚öú")
                else:
                    await message.client.send_message(message.to_id, f"{args} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            except Exception as e:
                await message.client.send_message(message.to_id, f"–û—à–∏–±–∫–∞: {str(e)}")
        else:
            reply = await message.get_reply_message()
            if not reply:
                await message.client.send_message(message.to_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            try:
                user = await message.client.get_entity(reply.sender_id)
                if isinstance(user, types.User):
                    await message.client.send_message(message.chat_id, f"–¢–≤–æ–π ID: ‚öú{user.id}‚öú", reply_to=reply.id)
                else:
                    await message.client.send_message(message.to_id, "–≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            except Exception as e:
                await message.client.send_message(message.to_id, f"–û—à–∏–±–∫–∞: {str(e)}")

    async def suidcmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∑–∞—Ç–µ–º —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤)"""
        await message.delete()
        args = utils.get_args_raw(message)
        if args:
            if not args.startswith("@"):
                await message.client.send_message(message.to_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username.")
                return

            try:
                user = await message.client.get_entity(args)
                await message.client.send_message('me', f"ID {args}: ‚öú{user.id}‚öú")
                # –£–±–∏—Ä–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            except Exception as e:
                await message.client.send_message(message.to_id, f"–û—à–∏–±–∫–∞: {str(e)}")
        else:
            try:
                user = await message.client.get_entity(message.chat_id)
                await message.client.send_message('me', f"ID: ‚öú{user.id}‚öú")
                # –£–±–∏—Ä–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            except Exception as e:
                await message.client.send_message(message.to_id, f"–û—à–∏–±–∫–∞: {str(e)}")

    async def useridcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID"""
        await message.delete()
        users = []

        async for dialog in message.client.iter_dialogs():
            if isinstance(dialog.entity, types.User) and not dialog.entity.bot:
                if dialog.message:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
                    users.append((dialog.name or "–ë–µ–∑ –∏–º–µ–Ω–∏", dialog.entity.id))

        result = ""

        if users:
            users_list = "\n|\n".join([f"{name}\n‚öú{user_id}‚öú" for name, user_id in users])
            result += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n{users_list}\n\n"
        else:
            result += "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>\n\n"

        await message.client.send_message(message.to_id, result)

    async def channelidcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Ö ID"""
        await message.delete()
        channels = []

        async for dialog in message.client.iter_dialogs():
            if dialog.is_channel and not dialog.entity.megagroup:
                channels.append((dialog.name or "–ë–µ–∑ –∏–º–µ–Ω–∏", dialog.entity.id, f"-100{abs(dialog.entity.id)}"))

        result = ""

        if channels:
            channels_list = "\n|\n".join([f"{name}\n‚öú{channel_id}‚öú\n‚öú{channel_id_with_prefix}‚öú" for name, channel_id, channel_id_with_prefix in channels])
            result += f"üì° <b>–ö–∞–Ω–∞–ª—ã:</b>\n{channels_list}"
        else:
            result += "‚ùå <b>–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>"

        await message.client.send_message(message.to_id, result)

    async def botidcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ —Å –∏—Ö ID"""
        await message.delete()
        bots = []

        async for dialog in message.client.iter_dialogs():
            if isinstance(dialog.entity, types.User) and dialog.entity.bot:
                bots.append((dialog.name or "–ë–µ–∑ –∏–º–µ–Ω–∏", dialog.entity.id))

        result = ""

        if bots:
            bots_list = "\n|\n".join([f"{name}\n‚öú{bot_id}‚öú" for name, bot_id in bots])
            result += f"ü§ñ <b>–ë–æ—Ç—ã:</b>\n{bots_list}\n\n"
        else:
            result += "‚ùå <b>–ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>\n\n"

        await message.client.send_message(message.to_id, result)

    async def groupidcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø —Å –∏—Ö ID"""
        await message.delete()
        groups = []

        async for dialog in message.client.iter_dialogs():
            if dialog.is_group or (dialog.is_channel and dialog.entity.megagroup):
                groups.append((dialog.name or "–ë–µ–∑ –∏–º–µ–Ω–∏", dialog.entity.id, f"-100{abs(dialog.entity.id)}"))

        result = ""

        if groups:
            groups_list = "\n|\n".join([f"{name}\n‚öú{group_id}‚öú\n‚öú{group_id_with_prefix}‚öú" for name, group_id, group_id_with_prefix in groups])
            result += f"üìö <b>–ì—Ä—É–ø–ø—ã:</b>\n{groups_list}\n\n"
        else:
            result += "‚ùå <b>–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>\n\n"

        await message.client.send_message(message.to_id, result)

    async def leavcmd(self, message):
        """[ID] -- –ü–æ–∫–∏–Ω—É—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª"""
        await message.delete()
        args = utils.get_args_raw(message)
        if not args:
            await message.client.send_message(message.to_id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞.</b>")
            return

        try:
            chat_id = int(args)
            await message.client(LeaveChannelRequest(chat_id))
            await message.client.send_message(message.to_id, f"<b>–£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª —Å ID:</b> ‚öú{chat_id}‚öú")
        except ValueError:
            await message.client.send_message(message.to_id, "<b>ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.</b>")
        except Exception as e:
            await message.client.send_message(message.to_id, f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª:</b> {e}")

    async def cgidcmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç–µ –∏–ª–∏ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É"""
        await message.delete()
        args = utils.get_args_raw(message)

        if args:
            if not args.startswith("@"):
                await message.client.send_message(message.to_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –≥—Ä—É–ø–ø—ã.")
                return

            try:
                group = await message.client.get_entity(args)
                if isinstance(group, types.Chat) or (isinstance(group, types.Channel) and group.megagroup):
                    await message.client.send_message(message.to_id, f"ID –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã: ‚öú{group.id}‚öú")
                else:
                    await message.client.send_message(message.to_id, "–≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞.")
            except Exception as e:
                await message.client.send_message(message.to_id, f"–û—à–∏–±–∫–∞: {str(e)}")
        else:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ–º —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            reply = await message.get_reply_message()

            if not reply or not (reply.is_group or (reply.is_channel and reply.entity.megagroup)):
                await message.client.send_message(message.to_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.")
                return

            group_id = reply.chat.id
            await message.client.send_message(message.to_id, f"ID –≥—Ä—É–ø–ø—ã: ‚öú{group_id}‚öú")