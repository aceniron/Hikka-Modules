from .. import loader, utils
import time

@loader.tds
class AutoResponse(loader.Module):
    """–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫."""

    strings = {
        "name": "AutoResponse",
        "module_enabled": "<emoji document_id=5264971795647184318>‚úÖ</emoji> <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω.</b>",
        "module_disabled": "<emoji document_id=5262642849630926308>‚ùå</emoji> <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω.</b>",
        "reset": "<emoji document_id=5345794417208861153>üîÑ</emoji> <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º —Å–±—Ä–æ—à–µ–Ω.</b>",
        "message_cleared": "<emoji document_id=5345794417208861153>üîÑ</emoji> <b>–°–æ–æ–±—â–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.</b>",
        "settings": "<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n<b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω:</b> {is_active}\n<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:</b> {response_interval} —á–∞—Å–æ–≤\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {numbs}\n<b>–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç:</b> {reply}",
        "message_saved": "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.</b>"
    }

    def __init__(self):
        self.message = "–ü—Ä–∏–≤–µ—Ç %name%! –≠—Ç–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫. –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –ø–æ–∑–∂–µ."
        self.urls = None
        self.reply = False
        self.numbs = "one"
        self.response_interval = 0
        self.is_active = False
        self.replied_users = {}
        self.allow_next_message = {}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.replied_users = self.db.get("AutoResponse", "replied_users", {})
        self.is_active = self.db.get("AutoResponse", "is_active", True)
        self.allow_next_message = self.db.get("AutoResponse", "allow_next_message", {})

    async def watcher(self, message):
        if not self.is_active:
            return
        if not message.is_private or message.out:
            return

        sender_id = message.sender_id
        sender = await self.client.get_entity(sender_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª –Ω–∞ –±–æ—Ç–æ–≤
        if sender.bot:
            return

        current_time = time.time()

        if self.numbs == "one" and sender_id in self.replied_users:
            last_response_time = self.replied_users[sender_id]
            response_interval = self.response_interval * 3600
            if response_interval == 0 or (current_time - last_response_time) < response_interval:
                return

        first_name = sender.first_name
        response_message = self.message.replace("%name%", first_name)

        if self.urls:
            if self.reply:
                await self.client.send_file(message.sender_id, self.urls, caption=response_message, reply_to=message.id)
            else:
                await self.client.send_file(message.sender_id, self.urls, caption=response_message)
        else:
            if self.reply:
                await self.client.send_message(message.sender_id, response_message, reply_to=message.id)
            else:
                await self.client.send_message(message.sender_id, response_message)

        self.replied_users[sender_id] = current_time
        self.allow_next_message[sender_id] = True
        self.db.set("AutoResponse", "replied_users", self.replied_users)
        self.db.set("AutoResponse", "allow_next_message", self.allow_next_message)

        if sender_id in self.allow_next_message and self.allow_next_message[sender_id]:
            self.allow_next_message[sender_id] = False
            self.db.set("AutoResponse", "allow_next_message", self.allow_next_message)
        else:
            async for msg in self.client.iter_messages(sender_id, from_user='me'):
                await msg.delete()
            async for msg in self.client.iter_messages(sender_id):
                await msg.delete()

    @loader.command()
    async def setmesse(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º."""
        reply = await message.get_reply_message()
        if reply:
            self.message = reply.text or ""
            self.urls = await self.client.download_media(reply, file=bytes)  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            await message.edit(self.strings["message_saved"])
        else:
            await message.edit("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º.</b>")

    @loader.command()
    async def setreply(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–≤–µ—Ç (True/False)."""
        self.reply = utils.get_args_raw(message).lower() == "true"
        await message.edit(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.reply}")

    @loader.command()
    async def setnumbes(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è ('one' –∏–ª–∏ 'all')."""
        self.numbs = utils.get_args_raw(message)
        await message.edit(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.numbs}")

    @loader.command()
    async def setint(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Å–∞—Ö."""
        self.response_interval = int(utils.get_args_raw(message))
        await message.edit(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.response_interval} —á–∞—Å–æ–≤")

    @loader.command()
    async def sendresponse(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º."""
        sender_id = message.sender_id
        sender = await self.client.get_entity(sender_id)
        first_name = sender.first_name
        response_message = self.message.replace("%name%", first_name)
        
        if self.urls:
            await self.client.send_file(sender_id, self.urls, caption=response_message)
        else:
            await self.client.send_message(sender_id, response_message)

    @loader.command()
    async def enable(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫."""
        self.is_active = True
        self.db.set("AutoResponse", "is_active", True)
        await message.edit(self.strings["module_enabled"])

    @loader.command()
    async def disable(self, message):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫."""
        self.is_active = False
        self.db.set("AutoResponse", "is_active", False)
        await message.edit(self.strings["module_disabled"])

    @loader.command()
    async def reset(self, message):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º."""
        self.replied_users.clear()
        self.db.set("AutoResponse", "replied_users", {})
        await message.edit(self.strings["reset"])

    @loader.command()
    async def clearmessage(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞."""
        self.message = "–ü—Ä–∏–≤–µ—Ç %name%! –≠—Ç–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫. –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –ø–æ–∑–∂–µ."
        self.urls = None
        await message.edit(self.strings["message_cleared"])

    @loader.command()
    async def showsettings(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞."""
        settings = self.strings["settings"].format(
            is_active="–î–∞" if self.is_active else "–ù–µ—Ç",
            response_interval=self.response_interval,
            numbs=self.numbs,
            reply="–î–∞" if self.reply else "–ù–µ—Ç"
        )
        await message.edit(settings)