from telethon.tl.types import Channel, Chat
from telethon.tl.functions.channels import GetForumTopicsRequest  # –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from .. import loader, utils


@loader.tds
class MyMessagesCleanerMod(loader.Module):
    """üßπ –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –≥—Ä—É–ø–ø—ã —Å —Ç–µ–º–∞–º–∏ (—Ñ–æ—Ä—É–º—ã), –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ –Ω–∏—Ö"""

    strings = {
        "name": "MyMessagesCleaner",
        "processing": "‚è≥ –£–¥–∞–ª—è—é –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...",
        "done": "‚úÖ –£–¥–∞–ª–µ–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π",
    }

    async def client_ready(self, client, db):
        self._client = client

    @loader.command(desc="–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –≥—Ä—É–ø–ø—ã —Å —Ç–µ–º–∞–º–∏ (—Ñ–æ—Ä—É–º—ã), –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ –Ω–∏—Ö")
    async def delmymsgs(self, message):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–µ–º—ã –≤ —Ñ–æ—Ä—É–º–∞—Ö)"""
        await utils.answer(message, self.strings["processing"])
        count = 0

        async for dialog in self._client.iter_dialogs():
            entity = dialog.entity

            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–Ω–µ –º–µ–≥–∞–≥—Ä—É–ø–ø—ã)
            if isinstance(entity, Channel) and not entity.megagroup:
                continue

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏ –õ–°
            try:
                async for msg in self._client.iter_messages(dialog.id, from_user="me"):
                    try:
                        await msg.delete()
                        count += 1
                    except:
                        continue
            except:
                continue

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä—É–º–∞—Ö (–≥—Ä—É–ø–ø–∞—Ö —Å —Ç–µ–º–∞–º–∏)
            if isinstance(entity, Channel) and getattr(entity, "megagroup", False) and getattr(entity, "forum", False):
                try:
                    result = await self._client(GetForumTopicsRequest(
                        channel=entity,
                        offset_date=0,
                        offset_id=0,
                        offset_topic=0,
                        limit=100
                    ))
                    for topic in result.topics:
                        try:
                            async for msg in self._client.iter_messages(
                                entity,
                                from_user="me",
                                thread_id=topic.id
                            ):
                                try:
                                    await msg.delete()
                                    count += 1
                                except:
                                    continue
                        except:
                            continue
                except:
                    continue

        await utils.answer(message, self.strings["done"].format(count))