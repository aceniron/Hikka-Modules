from telethon.types import Message
from .. import loader, utils

@loader.tds
class ForwardMessage(loader.Module):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    strings = {"name": "ForwardMessage"}

    async def client_ready(self, client, db):
        self._client = client
        self.db = db
        # –•—Ä–∞–Ω–∏–º –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è
        self.forwarding_rules = self.db.get(self.strings["name"], "forwarding_rules", {})
        self.log_chat_id = self.db.get(self.strings["name"], "log_chat_id", None)

    @loader.command(
        ru_doc="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.\n–ò—Å–ø–æ–ª—å–∑—É–π: .addforward <ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞> <ID —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞> <—Ä–µ–∂–∏–º>\n–†–µ–∂–∏–º: 0 - –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, 1 - —Å —Ç–µ–∫—Å—Ç–æ–º"
    )
    async def addforward(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        args = utils.get_args_raw(message)
        if not args or len(args.split()) != 3:
            await utils.answer(
                message,
                "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: .addforward <ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞> <ID —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞> <—Ä–µ–∂–∏–º>\n–†–µ–∂–∏–º: 0 - –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, 1 - —Å —Ç–µ–∫—Å—Ç–æ–º"
            )
            return

        try:
            source_chat_id, target_chat_id, forward_mode = map(int, args.split())
            source_chat_id_str = str(source_chat_id)
            if source_chat_id_str not in self.forwarding_rules:
                self.forwarding_rules[source_chat_id_str] = []
            self.forwarding_rules[source_chat_id_str].append((target_chat_id, forward_mode))
            self.db.set(self.strings["name"], "forwarding_rules", self.forwarding_rules)
            await utils.answer(
                message,
                f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n–ò–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ {source_chat_id} –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª {target_chat_id}, —Ä–µ–∂–∏–º: {forward_mode}"
            )
        except ValueError:
            await utils.answer(
                message,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ —Ä–µ–∂–∏–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π: .addforward <ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞> <ID —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞> <—Ä–µ–∂–∏–º>"
            )

    @loader.command(
        ru_doc="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.\n–ò—Å–ø–æ–ª—å–∑—É–π: .clearforward"
    )
    async def clearforward(self, message: Message):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        self.forwarding_rules = {}
        self.db.set(self.strings["name"], "forwarding_rules", {})
        await utils.answer(message, "‚úÖ –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.\n–ò—Å–ø–æ–ª—å–∑—É–π: .showforwards"
    )
    async def showforwards(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        if not self.forwarding_rules:
            await utils.answer(message, "‚ÑπÔ∏è –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
            return

        rules = ""
        idx = 1
        for source_chat_id, targets in self.forwarding_rules.items():
            for target_chat_id, forward_mode in targets:
                rules += f"{idx}. –ò–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ {source_chat_id} –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª {target_chat_id}, —Ä–µ–∂–∏–º: {forward_mode}\n"
                idx += 1
        await utils.answer(message, f"üìã –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n{rules}")

    @loader.command(
        ru_doc="–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.\n–ò—Å–ø–æ–ª—å–∑—É–π: .delforward <–Ω–æ–º–µ—Ä_–ø—Ä–∞–≤–∏–ª–∞>"
    )
    async def delforward(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit():
            await utils.answer(
                message,
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π: .delforward <–Ω–æ–º–µ—Ä_–ø—Ä–∞–≤–∏–ª–∞>"
            )
            return

        rule_number = int(args)
        current = 0
        found = False
        for source_chat_id in list(self.forwarding_rules.keys()):
            targets = self.forwarding_rules[source_chat_id]
            for i in range(len(targets)):
                current += 1
                if current == rule_number:
                    del targets[i]
                    if not targets:
                        del self.forwarding_rules[source_chat_id]
                    found = True
                    break
            if found:
                break

        if found:
            self.db.set(self.strings["name"], "forwarding_rules", self.forwarding_rules)
            await utils.answer(message, f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ‚Ññ{rule_number} —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await utils.answer(message, "‚ùå –ü—Ä–∞–≤–∏–ª–æ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    @loader.command(
        ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.\n–ò—Å–ø–æ–ª—å–∑—É–π: .setlogchat <ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞>"
    )
    async def setlogchat(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–æ–∫"""
        args = utils.get_args_raw(message)
        if not args or not args.lstrip("-").isdigit():
            await utils.answer(
                message,
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π: .setlogchat <ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞>"
            )
            return

        self.log_chat_id = int(args)
        self.db.set(self.strings["name"], "log_chat_id", self.log_chat_id)
        await utils.answer(message, f"‚úÖ –ß–∞—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.log_chat_id}")

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.\n–ò—Å–ø–æ–ª—å–∑—É–π: .showlogchat"
    )
    async def showlogchat(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.log_chat_id:
            await utils.answer(message, f"üìù –ß–∞—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {self.log_chat_id}")
        else:
            await utils.answer(message, "‚ÑπÔ∏è –ß–∞—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    @loader.watcher(out=False)
    async def watcher(self, message: Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º"""
        if not isinstance(message, Message):
            return

        source_chat_id = str(message.chat_id)
        if source_chat_id in self.forwarding_rules:
            for target_chat_id, forward_mode in self.forwarding_rules[source_chat_id]:
                try:
                    if forward_mode == 0:
                        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                        await self._client.send_message(
                            int(target_chat_id),
                            file=message.media or None
                        )
                    elif forward_mode == 1:
                        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
                        await self._client.send_message(
                            int(target_chat_id),
                            message.text or '',
                            file=message.media or None
                        )
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                    if self.log_chat_id:
                        log_entry = (
                            f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {source_chat_id} "
                            f"–≤ {target_chat_id}, —Ä–µ–∂–∏–º: {forward_mode}"
                        )
                        await self._client.send_message(self.log_chat_id, log_entry)
                except Exception as e:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥-—á–∞—Ç
                    if self.log_chat_id:
                        error_entry = (
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {source_chat_id} "
                            f"–≤ {target_chat_id}: {e}"
                        )
                        await self._client.send_message(self.log_chat_id, error_entry)
                    # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {source_chat_id} –≤ {target_chat_id}: {e}")