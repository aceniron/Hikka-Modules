from telethon import TelegramClient
from deep_translator import GoogleTranslator
import requests
import os

from .. import loader, utils

class OcrSpace(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    
    strings = {
        "name": "OcrSpace",
        "a": "<emoji document_id=6008090211181923982>üìù</emoji> <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n\n<code>{}</code>",
        "c": "<emoji document_id=4949467677086188821>üò≠</emoji> <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>",
        "e": "<emoji document_id=4947293727849710197>ü§¨</emoji> <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º</b>",
        "f": "<emoji document_id=4925063363672670983>ü§∑</emoji> <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç</b>",
        "g": "<emoji document_id=4925063363672670983>ü§∑</emoji> <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç</b>",
        "h": "<emoji document_id=4949683473423008596>üçå</emoji> <b>–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è</b>"
    }

    def __init__(self):
        self.api_key = "K86460026588957"

    async def client_ready(self, client: TelegramClient, db):
        self.client = client

    async def p(self, m):
        """—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é OCR"""
        r = await m.get_reply_message()
        if not r or not r.photo:
            await utils.answer(m, self.strings["e"])
            return None

        f = await self.client.download_media(r.photo)
        p = {
            'isOverlayRequired': False,
            'apikey': self.api_key,
            'language': 'eng',
            'scale': True,
            'OCREngine': 2
        }

        try:
            with open(f, 'rb') as file:
                s = requests.post(
                    'https://api.ocr.space/parse/image',
                    data=p,
                    files={'filename': ('image.png', file, 'image/png')}
                )
            s.raise_for_status()
        except requests.RequestException as e:
            print(f"Request Error: {e}")
            await utils.answer(m, self.strings["c"])
            return None
        finally:
            if os.path.exists(f):
                os.remove(f)

        l = s.json()
        if 'ParsedResults' in l and l['ParsedResults']:
            t = l['ParsedResults'][0].get('ParsedText', '').strip()
            if t:
                return t
            else:
                await utils.answer(m, self.strings["h"])
                return None
        else:
            await utils.answer(m, self.strings["f"])
            return None

    async def t(self, text, lang):
        try:
            a = GoogleTranslator(source='auto', target=lang)
            i = a.translate(text=text)
            return i
        except Exception as e:
            print(f"Translation Error: {e}")
            return None

    @loader.command()
    async def ocr(self, m):
        """—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        t = await self.p(m)
        if t:
            await utils.answer(m, self.strings["a"].format(t))

    @loader.command()
    async def trocr(self, m):
        """—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        args = utils.get_args_raw(m).split()
        lang = args[0] if args else 'ru'
        t = await self.p(m)
        if t:
            n = await self.t(t, lang)
            if n:
                await utils.answer(m, n)
            else:
                await utils.answer(m, self.strings["g"])