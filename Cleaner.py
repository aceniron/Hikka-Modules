from .. import loader, utils
from telethon import events, types
import asyncio

@loader.tds
class Cleaner(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –∏ –∫–∞–Ω–∞–ª–∞ –æ—Ç —Å—Ç–∏–∫–µ—Ä–æ–≤, –≤–æ–π—Å–æ–≤, –º–µ–¥–∏–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    strings = {
        "name": "Cleaner",
        "cleaned": "üßπ –£–¥–∞–ª–µ–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π",
        "no_permission": "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
        "total_messages": "–í—Å–µ–≥–æ {} –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
    }

    def __init__(self):
        self.active_chats = {}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.active_chats = self.db.get(__name__, "active_chats", {})

        async def cleaner_handler(event):
            chat_id = str(event.chat_id)
            if chat_id not in self.active_chats:
                return

            try:
                participant = await event.client.get_permissions(event.chat_id)
                if not participant.delete_messages:
                    print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")
                    return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
                return

            should_delete = False

            if event.message.sticker:
                should_delete = True
            elif event.message.voice:
                should_delete = True
            elif event.message.media:
                should_delete = True
            elif event.message.forward:
                should_delete = True

            if should_delete:
                await asyncio.sleep(60)
                try:
                    await event.message.delete()
                except:
                    pass

        self.handler = cleaner_handler
        client.add_event_handler(self.handler, events.NewMessage())

    @loader.command()
    async def cleanum(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ: .cleanum <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>"""
        if not message.is_reply and not utils.get_args_raw(message):
            await utils.answer(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        try:
            count = int(utils.get_args_raw(message)) if utils.get_args_raw(message) else 100
        except:
            count = 100

        try:
            deleted = 0
            async for msg in message.client.iter_messages(message.chat_id, limit=count):
                try:
                    await msg.delete()
                    deleted += 1
                except:
                    continue

            await utils.answer(message, self.strings["cleaned"].format(deleted))
        except:
            await utils.answer(message, self.strings["no_permission"])

    @loader.command()
    async def cleansms(self, message):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –≥—Ä—É–ø–ø–µ"""
        chat_id = message.chat_id

        try:
            total_messages = 0
            async for _ in message.client.iter_messages(chat_id):
                total_messages += 1
            total_messages_text = self.strings["total_messages"].format(total_messages)

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            await message.client.send_message('me', total_messages_text)

            # –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞
            await message.delete()

        except Exception as e:
            await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")