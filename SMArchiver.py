import zipfile
import os

from datetime import datetime

from .. import loader, utils


@loader.tds
class SMArchiver(loader.Module):
    """unloads all messages from Favorites"""

    strings = {
        "name": "SMArchiver",
        "archive_created": "üéâ Archive with messages has been successfully created: {filename}",
        "no_messages": "‚ö†Ô∏è There are no messages in Saved Messages.",
        "error": "‚ùå An error occurred: {error}",
        "processing": "üõ†Ô∏è Processing messages... Please wait.\n\nP.S: Be careful, if you have a lot of messages, you may get flooding, and if you have a lot of heavy files, the download will be slower than usual.",
    }

    strings_ru = {
        "archive_created": "üéâ –ê—Ä—Ö–∏–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}",
        "no_messages": "‚ö†Ô∏è –í –ò–∑–±—Ä–∞–Ω–Ω–æ–º –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.",
        "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}",
        "processing": "üõ†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n\nP.S: –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –µ—Å–ª–∏ —É –≤–∞—Å –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–ª—É–¥–≤–µ–π—Ç, –∏ –µ—â—ë –µ—Å–ª–∏ —É –≤–∞—Å –º–Ω–æ–≥–æ —Ç—è–∂—ë–ª—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ —á–µ–º –æ–±—ã—á–Ω–æ.",
    }

    @loader.command(
        ru_doc="–≤—ã–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ / Saved Messages –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –≤ –æ–¥–Ω–æ–º –∞—Ä—Ö–∏–≤–µ.",
        en_doc="downloads all messages from Favorites / Saved Messages and collects them in one archive.",
    )
    async def smdump(self, message):
        await utils.answer(message, self.strings["processing"])

        saved_messages = await message.client.get_messages("me", limit=None)

        if not saved_messages:
            await utils.answer(message, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")
            return

        current_month = datetime.now().strftime("%B %Y")
        archive_path = "saved_messages.zip"

        try:
            with zipfile.ZipFile(archive_path, "w") as archive:
                month_folder = f"{current_month}/"
                archive.writestr(month_folder, "")


                message_folders = {
                    "Text Messages": f"{month_folder}Text Messages/",
                    "Voice Messages": f"{month_folder}Voice Messages/",
                    "Video Messages": f"{month_folder}Video Messages/",
                    "Videos": f"{month_folder}Videos/",
                    "Audios": f"{month_folder}Audios/",
                    "GIFs": f"{month_folder}GIFs/",
                    "Files": f"{month_folder}Files/"
                }

                for folder in message_folders.values():
                    archive.writestr(folder, "")

                for msg in saved_messages:
                    await self.add_message_to_archive(msg, archive, message_folders)

            await message.client.send_file(
                message.chat_id,
                archive_path,
                caption=self.strings["archive_created"].format(filename=os.path.basename(archive_path)),
            )

        except Exception as e:
            await utils.answer(message, self.strings["error"].format(error=str(e)))

        finally:
            if os.path.exists(archive_path):
                os.remove(archive_path)

    async def add_message_to_archive(self, msg, archive, folders):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –∞—Ä—Ö–∏–≤."""
        if msg.message:
            timestamp = datetime.fromtimestamp(msg.date.timestamp()).strftime("%Y%m%d_%H%M%S")
            safe_name = f"message_{timestamp}.txt"
            archive.writestr(os.path.join(folders["Text Messages"], safe_name), msg.message)

        if msg.media:
            media_file = await msg.client.download_media(msg.media)
            if media_file:
                mime_type = msg.media.document.mime_type if hasattr(msg.media, "document") else None
                folder = folders["Files"]

                if mime_type:
                    if mime_type.startswith("audio/"):
                        folder = folders["Audios"]
                    elif mime_type.startswith("video/"):
                        folder = folders["Videos"]
                    elif mime_type.startswith("image/gif"):
                        folder = folders["GIFs"]

                archive.write(media_file, os.path.join(folder, os.path.basename(media_file)))