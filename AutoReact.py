from telethon import events, types
from .. import loader, utils
import logging

@loader.tds
class AutoReactMod(loader.Module):
    strings = {
        "name": "AutoReact",
        "enabled": "‚úÖ –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –≥—Ä—É–ø–ø–µ —Å ID: {}",
        "disabled": "üö´ –ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã –≤ –≥—Ä—É–ø–ø–µ —Å ID: {}",
        "reaction_set": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è: {}",
        "no_reaction": "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –µ–≥–æ ID –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏",
        "group_list": "üìÑ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è–º–∏: {}",
        "user_added": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫",
        "user_list": "üìÑ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è–º–∏: {}",
        "groups_cleared": "üóëÔ∏è –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –æ—á–∏—â–µ–Ω",
        "users_cleared": "üóëÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω",
        "subscribed_groups": "üìÑ –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:\n{}",
        "current_reaction": "–¢–µ–∫—É—â–∞—è —Ä–µ–∞–∫—Ü–∏—è: {}"
    }

    def __init__(self):
        self.current_reaction = "üëç"
        self.active_chats = {}
        self.user_list = []

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self.active_chats = self.get("active_chats", {})
        self.user_list = self.get("user_list", [])

    def save_active_chats(self):
        self.set("active_chats", self.active_chats)

    def save_user_list(self):
        self.set("user_list", self.user_list)

    @loader.command(ru_doc="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ")
    async def addg(self, message):
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_reaction"])
            return

        chat_id = args.strip()
        
        if chat_id in self.active_chats:
            del self.active_chats[chat_id]
            status = False
        else:
            self.active_chats[chat_id] = True
            status = True
            
        self.save_active_chats()
        
        await utils.answer(
            message,
            self.strings["enabled"].format(chat_id) if status else self.strings["disabled"].format(chat_id)
        )

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è–º–∏")
    async def showg(self, message):
        await utils.answer(message, self.strings["group_list"].format(", ".join(self.active_chats.keys())))

    @loader.command(ru_doc="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID")
    async def addu(self, message):
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_reaction"])
            return

        user_id = args.strip()
        if user_id not in self.user_list:
            self.user_list.append(user_id)
            self.save_user_list()
            await utils.answer(message, self.strings["user_added"].format(user_id))
        else:
            await utils.answer(message, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è–º–∏")
    async def showu(self, message):
        await utils.answer(message, self.strings["user_list"].format(", ".join(self.user_list)))

    @loader.command(ru_doc="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è–º–∏")
    async def clup(self, message):
        self.active_chats.clear()
        self.save_active_chats()
        await utils.answer(message, self.strings["groups_cleared"])

    @loader.command(ru_doc="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è–º–∏")
    async def cles(self, message):
        self.user_list.clear()
        self.save_user_list()
        await utils.answer(message, self.strings["users_cleared"])

    @loader.command(ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é (–æ–±—ã—á–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏–ª–∏ ID)")
    async def semo(self, message):
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_reaction"])
            return
        
        self.current_reaction = args
        await utils.answer(message, self.strings["reaction_set"].format(args))

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é")
    async def showr(self, message):
        await utils.answer(message, self.strings["current_reaction"].format(self.current_reaction))

    @loader.watcher()
    async def watcher(self, message):
        if not isinstance(message, types.Message):
            return
            
        chat_id = str(message.chat_id)
        
        if chat_id not in self.active_chats or str(message.sender_id) not in self.user_list:
            return

        try:
            await message.react(self.current_reaction)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {str(e)}")

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
    async def mygroups(self, message):
        groups = []
        async for dialog in self._client.iter_dialogs():
            if dialog.is_group:
                groups.append(f"{dialog.name}\n{dialog.id}")

        await utils.answer(message, self.strings["subscribed_groups"].format("\n|\n".join(groups)))